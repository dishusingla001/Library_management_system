# Q 1. List all book titles written by “Jane Austen”.
SELECT TITLE
FROM BOOKS
JOIN AUTHOR
ON BOOKS.AUTHOR_ID = AUTHOR.AUTHOR_ID
WHERE AUTHOR_NAME = 'Jane Austen'; 
# Q 2. Find members who have borrowed more than 3 books.
SELECT MEMBER_NAME 
FROM MEMBER M
JOIN ISSUE_RETURN I 
ON M.MEMBER_ID = I.MEMBER_ID
GROUP BY M.MEMBER_NAME
HAVING COUNT(I.BOOK_ID)>3;

# Q 3. Get books along with their publisher names.
SELECT TITLE,P.PUBLISHER_NAME 
FROM BOOKS B
JOIN PUBLISHER P
ON B.PUBLISHER_ID = P.PUBLISHER_ID;

# Q 4. Find employees who have not issued any books.
SELECT EMPLOYEE_NAME 
FROM EMPLOYEE
LEFT JOIN ISSUE_RETURN I
ON EMPLOYEE.EMPLOYEE_ID = I.EMPLOYEE_ID
WHERE I.EMPLOYEE_ID IS NULL;

# Q 5. List all fines that are unpaid.
SELECT * 
FROM FINE
WHERE PAID_STATUS = "Unpaid";

# Q 6. Find total fines imposed on member with MemberID = 4.
SELECT SUM(F.AMOUNT) 
AS TOTAL_FINE 
FROM FINE F 
JOIN ISSUE_RETURN I 
ON F.ISSUE_ID = I.ISSUE_ID 
WHERE I.MEMBER_ID = 4;

# Q 7. Get all books written by author “John Doe”.
SELECT b.Title
FROM Books b
JOIN Author a ON b.Author_Id = a.Author_Id
WHERE a.Author_Name = 'John Doe';

# Q 8. List members who have paid all fines.
SELECT MEMBER_NAME 
FROM MEMBER 
	WHERE MEMBER_ID IN (
	SELECT I.MEMBER_ID
    FROM FINE F
    JOIN ISSUE_RETURN I 
    ON F.ISSUE_ID = I.ISSUE_ID
    WHERE F.PAID_STATUS = 'Paid'
);
# Q 9. Find members who have pending fines.
SELECT M.MEMBER_NAME
AS NAME 
FROM MEMBER M 
JOIN ISSUE_RETURN I 
ON M.MEMBER_ID = I.MEMBER_ID
JOIN FINE F
ON I.ISSUE_ID = F.ISSUE_ID
WHERE PAID_STATUS = 'UNPAID'
GROUP BY M.MEMBER_NAME; 

# Q 10. List authors whose books are currently issued.
SELECT A.AUTHOR_NAME 
FROM AUTHOR A
JOIN BOOKS B
ON B.BOOK_ID = A.AUTHOR_ID
JOIN ISSUE_RETURN I
ON B.BOOK_ID = I.BOOK_ID
WHERE I.RETURN_DATE IS NULL
GROUP BY A.AUTHOR_NAME;
# Q 11. FIND AUTHORS WHOSE BOOKS ARE ISSUED MORE THAN 5 TIMES.
SELECT A.AUTHOR_NAME
FROM AUTHOR A
JOIN BOOKS B
ON B.AUTHOR_ID = A.AUTHOR_ID
JOIN ISSUE_RETURN I
ON B.BOOK_ID = I.BOOK_ID
GROUP BY A.AUTHOR_ID, A.AUTHOR_NAME
HAVING COUNT(I.ISSUE_ID) > 5;

# Q 12. Get all fines imposed in August 2025.
SELECT FINE_ID,AMOUNT 
FROM Fine
WHERE Date_Imposed BETWEEN '2025-08-01' AND '2025-08-31';

# Q 13. Find the most borrowed book(s).
SELECT B.TITLE
FROM BOOKS B
JOIN ISSUE_RETURN I 
ON B.BOOK_ID = I.BOOK_ID
GROUP BY B.BOOK_ID
HAVING COUNT(I.BOOK_ID) = (
    SELECT MAX(ISSUE_COUNT)
    FROM (
        SELECT COUNT(*) AS ISSUE_COUNT
        FROM ISSUE_RETURN
        GROUP BY BOOK_ID
    ) AS COUNTS
);
# Q 14 Get all publishers.
SELECT PUBLISHER_NAME 
FROM PUBLISHER;

# Q 15. GET MEMBERS WHO BORROWED BOOKS IN 2025.
SELECT DISTINCT M.MEMBER_NAME
FROM MEMBER M
JOIN ISSUE_RETURN IR ON M.MEMBER_ID = IR.MEMBER_ID
WHERE YEAR(IR.ISSUE_DATE) = 2025;

# Q 16. LIST ALL EMPLOYEES WHO MANAGE ISSUES.
SELECT DISTINCT E.EMPLOYEE_NAME
FROM EMPLOYEE E
JOIN ISSUE_RETURN IR ON E.EMPLOYEE_ID = IR.EMPLOYEE_ID;

# Q 17. LIST ALL USERS OF THE LIBRARY.
SELECT MEMBER_NAME AS USER_NAME FROM MEMBER
UNION
SELECT EMPLOYEE_NAME AS USER_NAME FROM EMPLOYEE;

# Q 18. GET MEMBERS WHO BORROWED BOOKS BY PUBLISHER “OXFORD”.
SELECT DISTINCT M.MEMBER_NAME
FROM MEMBER M
JOIN ISSUE_RETURN IR ON M.MEMBER_ID = IR.MEMBER_ID
JOIN BOOKS B ON IR.BOOK_ID = B.BOOK_ID
JOIN PUBLISHER P ON B.PUBLISHER_ID = P.PUBLISHER_ID
WHERE P.PUBLISHER_NAME = 'OXFORD';

# Q 19. SHOW BOOKS BORROWED BY “RAHUL”.
SELECT B.TITLE
FROM MEMBER M
JOIN ISSUE_RETURN IR ON M.MEMBER_ID = IR.MEMBER_ID
JOIN BOOKS B ON IR.BOOK_ID = B.BOOK_ID
WHERE M.MEMBER_NAME = 'RAHUL';

# Q 20. FIND MEMBERS WHO BORROWED BOOKS ONLY FROM A SINGLE PUBLISHER.
SELECT M.MEMBER_NAME
FROM MEMBER M
JOIN ISSUE_RETURN IR ON M.MEMBER_ID = IR.MEMBER_ID
JOIN BOOKS B ON IR.BOOK_ID = B.BOOK_ID
JOIN PUBLISHER P ON B.PUBLISHER_ID = P.PUBLISHER_ID
GROUP BY M.MEMBER_ID
HAVING COUNT(DISTINCT P.PUBLISHER_ID) = 1;

# Q 21. FIND BOOKS BORROWED BOTH IN 2024 AND 2025.
SELECT DISTINCT B.TITLE
FROM BOOKS B
WHERE B.BOOK_ID IN (
    SELECT BOOK_ID FROM ISSUE_RETURN WHERE YEAR(ISSUE_DATE) = 2024
)
AND B.BOOK_ID IN (
    SELECT BOOK_ID FROM ISSUE_RETURN WHERE YEAR(ISSUE_DATE) = 2025
);

# Q 22. FIND MEMBERS WHO BORROWED ALL BOOKS BY AUTHOR “TAGORE”.
SELECT M.MEMBER_NAME
FROM MEMBER M
WHERE NOT EXISTS (
    SELECT B.BOOK_ID
    FROM BOOKS B
    JOIN AUTHOR A ON B.AUTHOR_ID = A.AUTHOR_ID
    WHERE A.AUTHOR_NAME = 'TAGORE'
    AND B.BOOK_ID NOT IN (
        SELECT IR.BOOK_ID
        FROM ISSUE_RETURN IR
        WHERE IR.MEMBER_ID = M.MEMBER_ID
    )
);

# Q 23. SHOW ALL OVERDUE BOOKS (DUE DATE < TODAY AND NOT RETURNED).
SELECT B.TITLE, M.MEMBER_NAME, IR.DUE_DATE
FROM ISSUE_RETURN IR
JOIN BOOKS B ON IR.BOOK_ID = B.BOOK_ID
JOIN MEMBER M ON IR.MEMBER_ID = M.MEMBER_ID
WHERE IR.RETURN_DATE IS NULL AND IR.DUE_DATE < CURDATE();

# Q 24. FIND BOOKS THAT ARE CURRENTLY BORROWED BY “ALICE”.
SELECT B.TITLE
FROM BOOKS B
WHERE B.BOOK_ID IN (
    SELECT BOOK_ID
    FROM ISSUE_RETURN IR
    JOIN MEMBER M ON IR.MEMBER_ID = M.MEMBER_ID
    WHERE M.MEMBER_NAME = 'ALICE' AND IR.RETURN_DATE IS NULL
);

# Q 25. FIND MEMBERS WHO HAVE BORROWED THE MAXIMUM NUMBER OF BOOKS.
SELECT M.MEMBER_NAME
FROM MEMBER M
JOIN ISSUE_RETURN IR ON M.MEMBER_ID = IR.MEMBER_ID
GROUP BY M.MEMBER_ID
HAVING COUNT(IR.BOOK_ID) = (
    SELECT MAX(CNT)
    FROM (
        SELECT COUNT(BOOK_ID) AS CNT
        FROM ISSUE_RETURN
        GROUP BY MEMBER_ID
    ) AS TEMP
);

